---
- name: Ensure SSH settings for PubkeyAuthentication
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PubkeyAuthentication'
    line: 'PubkeyAuthentication yes'
    state: present
  become: true

- name: Restart SSH service
  service:
    name: sshd
    state: restarted
  become: true

- name: Ensure the SSH directory exists
  file:
    path: "{{ ssh_key_dir }}"
    state: directory
    owner: "{{ ssh_user }}"
    group: "{{ ssh_user }}"
    mode: '0700'

- name: Check if the SSH authorized key exists
  stat:
    path: "{{ ssh_key_dir }}/authorized_keys"
  register: authorized_key

- name: Check if the SSH public key exists
  stat:
    path: "{{ ssh_key_dir }}/id_rsa.pub"
  register: ssh_key

- name: Delete existing SSH keys if specified
  file:
    path: "{{ ssh_key_dir }}/id_rsa"
    state: absent
  when: delete_existing_key | default(false) and ssh_key.stat.exists

- name: Delete existing SSH public key if specified
  file:
    path: "{{ ssh_key_dir }}/id_rsa.pub"
    state: absent
  when: delete_existing_key | default(false) and ssh_key.stat.exists

- name: Delete existing authorized_keys file if it exists
  file:
    path: "{{ ssh_key_dir }}/authorized_keys"
    state: absent
  when: delete_existing_key | default(false) and authorized_key.stat.exists

- name: Generate SSH key pair
  command: >
    sudo -u mysql ssh-keygen -t rsa -b 4096 -f {{ ssh_key_dir }}/id_rsa -N ""
  args:
    creates: "{{ ssh_key_dir }}/id_rsa"
  register: ssh_keygen_result
  when: delete_existing_key | default(false)

- name: Debug SSH key generation result
  debug:
    var: ssh_keygen_result

- name: Remove all files in authorized_keys directory
  command: "rm -rf ./auth"
  delegate_to: localhost

- name: Get public key from remote host
  shell: "cat {{ ssh_key_dir }}/id_rsa.pub"
  register: remote_public_key

- name: Debug SSH key generation result
  debug:
    var: remote_public_key

- name: Append public key to local authorized_keys file
  lineinfile:
    path: "./auth/authorized_keys" # 로컬 파일 경로
    line: "{{ remote_public_key.stdout }}" # 가져온 공개 키
    create: yes  # 파일이 없으면 생성
    state: present
  delegate_to: localhost  # 로컬 호스트에서 실행

- name: Copy authorized_keys file to remote mysql user's .ssh directory
  copy:
    src: "./auth/authorized_keys"  # 로컬 머신에서의 파일 경로
    dest: "{{ ssh_key_dir }}/authorized_keys"  # 원격 호스트의 경로
    owner: mysql  # 소유자
    group: mysql  # 그룹
    mode: '0600'  # 권한 설정


# 손볼 로직
#- name: Check if the SELinux context is already defined
#  shell: semanage fcontext -l | grep '{{ ssh_key_dir }}' || true
#  register: secontext_check
#  ignore_errors: true
#  when: ansible_os_family in ['RedHat', 'Rocky']
#
#- name: Add or modify the SELinux context for the directory and its files
#  command: >
#    semanage fcontext -m -t ssh_home_t '{{ ssh_key_dir }}(/.*)?'
#  when: 
#    - secontext_check is defined  # secontext_check가 정의되어 있는지 확인
#    - secontext_check.stdout | length > 0  # SELinux 컨텍스트가 정의되어 있을 경우
#    - ansible_os_family in ['RedHat', 'Rocky']
#
#- name: Add SELinux context if not already defined
#  command: >
#    semanage fcontext -a -t ssh_home_t '{{ ssh_key_dir }}(/.*)?'
#  when: 
#    - secontext_check is defined  # secontext_check가 정의되어 있는지 확인
#    - secontext_check.stdout | length == 0  # SELinux 컨텍스트가 정의되어 있지 않을 경우
#    - ansible_os_family in ['RedHat', 'Rocky']
#
#- name: Restore SELinux context on files
#  command: restorecon -R -v '{{ ssh_key_dir }}'
#  when: 
#    - secontext_check is defined  # secontext_check가 정의되어 있는지 확인
#    - secontext_check.stdout | length > 0  # SELinux 컨텍스트가 정의되어 있을 경우
#    - ansible_os_family in ['RedHat', 'Rocky']

